#!/bin/sh
# gerrit-project-name = !git config --get remote.origin.url | sed -e 's_.*:29418/__' -e 's_\\.git__'
# gerrit-json-query = !ssh -x -p 29418 gittools.se.axis.com gerrit query --format=JSON project:$(git gerrit-project-name) $*
# # gerrit-change-refs = "!f() { git gerrit-json-query $* | head -n-1 | jq -r '\"refs/changes/\\(.number[-2:])/\\(.number)/latest\"'; }; f"
# gerrit-change-refs = "!f() { git gerrit-json-query $* | head -n-1 | jq -r '.number | tostring | \"refs/changes/\\(.[-2:])/\\(.)/latest\"'; }; f"
# gerrit-open-change-refs = !git gerrit-change-refs status:open
# gerrit-change-fetches = "!f() { git gerrit-change-refs $* | sed \"s_refs/changes/[0-9][0-9]/\\([0-9]\\+/latest\\)_+\\0:refs/remotes/origin/changes/\\1_\"; }; f"
# gerrit-open-change-fetches = !git gerrit-change-fetches status:open
# gerrit-add-refs = "!f() { git gerrit-change-fetches $* | xargs -r -L1 git config --add remote.origin.fetch; }; f"
# gerrit-add-open-refs = !git gerrit-add-refs status:open
# gerrit-add-my-open-refs = !git gerrit-add-refs status:open owner:self
# gerrit-rm-refs = !git config --get-all remote.origin.fetch | sed -n \"/refs.changes/s/^+/git config --unset remote.origin.fetch /e\"
# gerrit-update-open-refs = !git gerrit-rm-refs && git gerrit-add-refs status:open
# gerrit-update-my-refs = !git gerrit-rm-refs && git gerrit-add-refs status:open owner:self

usage() {
	cat <<EOF
git gerrit-refs [options] query [--format={TEXT|JSON}] <query>
git gerrit-refs [options] addref <query>
git gerrit-refs [options] rmrefs
git gerrit-refs [options] rmdups

Options:
    --project <project>  Use <project> instead of the project of the current repo.

Query:
    Query the gerrit server for changesets matching the query expression.
    The query syntax is specified in the "Search" section of the gerrit documentation.

    The --format option (defaults to TEXT) specifies how entries should be output.

Addref:
    Add references for the gerrit changesets matching the query expression.

	options:
      --prune  Remove existing refs
      --trace  Print all git config operations

Rmrefs:
    Remove all gerrit changeset refspecs

	options:
      --trace  Print all git config operations

Rmdups:
    Remove duplicate refspecs entries

	options:
      --trace  Print all git config operations

coref:
    Fetch and checkout a gerrit changeset

EOF
}

parse_git_url() {
	local url proto user host port path
	url=$2
	# Remove any scheme or protocol
	proto=${url%%://*}
	url=${url#${proto}://}
	# Remove any user
	user=${url%%@*}
	if [ "$user" = "$url" ]; then
		user=""
	else
		url=${url#${user}@}
	fi
	# Remove the host
	host=${url%%[:/]*}
	url=${url#${host}}
	# Remove the port
	port=$(expr $url : ":\([0-9]\+\)[:/]")
	url=${url#${port:+:${port}}}
	# Remove the leading : or / from the path
	path=${url#?}
	case $1 in
		scheme|prot*) echo $proto ;;
		user)         echo $user  ;;
		host)         echo $host  ;;
		port)         echo $port  ;;
		path)         echo $path  ;;
		*)
			echo "parse_git_url: Unknown part '$1'" >&2
			exit 1
			;;
	esac
}

parse_gerrit_info() {
	gitremote=$(git config --get remote.origin.url)
	gerrithost=$(parse_git_url host ${gitremote})
	gerritport=$(parse_git_url port ${gitremote})
	project=$(parse_git_url path ${gitremote})
	project=${project%%.git}
	gerritssh="ssh -x ${gerritport:+-p $gerritport} $gerrithost"
}

gerrit_query() {
	parse_gerrit_info
	while [ "$1" ]; do
		case "$1" in
			'--format'|'--format=*')
			format=${1#*=}
			if [ "$format" = "$1" ]; then
				format=$2
				shift
			fi
			shift
			case $format in
				TEXT|JSON);;
				*)
					echo "Unknown gerrit query output format '$format'"
					return 1
					;;
			esac
			;;
			--) shift; break ;;
			*)         break ;;
		esac
	done
	$gerritssh \
		gerrit query --format=${format:-TEXT} "project:$project" "$@"
}

ref_formatter() {
	sed -E "s_([0-9]*([0-9]{2}))_+refs/changes/\2/\1/latest:refs/remotes/origin/changes/\1_"
}

gerrit_rmrefs() {
	while [ "$1" ]; do
		case $1 in
			--trace|-t) trace=-t; shift ;;
			--) shift; break ;;
			-*)
				echo "Unknown option $1"
				return 1
				;;
			*)         break ;;
		esac
	done
	local name=remote.origin.fetch
	# TODO: We probably want a regex here that matches the local refs
	#       instead of the remote refs. Might be tricky if we want
	#       dynamic local names
	local refregex='refs/changes/[0-9]{2}/[0-9]+'
	# Read all current refs
	git config --get-all $name |
		grep -E $refregex |
		sed 's/+/\\\\+/g' |
		xargs $trace --max-args=1 --no-run-if-empty \
			  git config --unset $name
}

gerrit_rm_duplicates() {
	local trace=''
	while [ "$1" ]; do
		case $1 in
			--trace|-t) trace=-t; shift ;;
			--) shift; break ;;
			-*)
				echo "Unknown option $1"
				return 1
				;;
			*)         break ;;
		esac
	done
	local name datadir duplicates oldrefs
	name=remote.origin.fetch
	datadir="$(mktemp --directory --tmpdir  git-gerrit-query-rmdup.XXXXXX)"
	duplicates="$datadir/duplicates"
	oldrefs="$datadir/oldrefs"
	git config --get-all $name |
		grep -E "$refregex" |
		tee "$oldrefs" |
		sort |
		uniq -d > "$duplicates"
	# Use xargs to trace the git config command
	echo | xargs $trace git config --unset-all $name
	# Re-add the non-duplicated and one each of the duplicates
	grep -Fvf "$duplicates" "$oldrefs" |
		cat - "$duplicates" |
		xargs $trace --max-args=1 --no-run-if-empty \
			  git config --add $name
}

gerrit_addref() {
	parse_gerrit_info
	local datadir prune='' trace=''
	local name=remote.origin.fetch
	# TODO: We probably want a regex here that matches the local refs
	#       instead of the remote refs. Might be tricky if we want
	#       dynamic local names
	local refregex='refs/changes/[0-9]{2}/[0-9]+'
	while [ "$1" ]; do
		case $1 in
			--prune|-p) prune=1;  shift ;;
			--trace|-t) trace=-t; shift ;;
			--) shift; break ;;
			-*)
				echo "Unknown option $1"
				return 1
				;;
			*)         break ;;
		esac
	done
	datadir=$(mktemp --directory --tmpdir  git-gerrit-query-addref.XXXXXX)
	local oldrefs=$datadir/oldrefs
	local newrefs=$datadir/newrefs
	# Read all current refs into the oldrefs file
	git config --get-all $name |
		grep -E $refregex  > $oldrefs
	# Read all found refs into the newrefs file
	$gerritssh \
		gerrit query --format=JSON "project:$project" $@ |
		head -n-1 |
		jq -r '.number' |
		ref_formatter >$newrefs
	if [ "$prune" ]; then
		local duprefs=$datadir/duprefs
		# Find duplicated oldrefs
		sort $oldrefs | uniq -d >$duprefs
		if [ -s $duprefs ]; then
			local refrestore=$datadir/refbackup
			# find all refs that are not in duprefs
			git config --get-all $name |
				grep -F -v -f $duprefs >$refrestore
			# Use xargs to trace the git config command
			echo | xargs $trace git config --unset-all $name
			# Re-add the non-duplicated and one each of the duplicates
			cat $refrestore $duprefs |
				xargs $trace --max-args=1 --no-run-if-empty \
					  git config --add $name
		fi
		# Remove all old refs that would not be added by the query.
		grep -F -v -f $newrefs $oldrefs |
			sed 's/+/\\\\+/g' |
			xargs $trace --max-args=1 --no-run-if-empty \
				  git config --unset $name
		# Update the oldrefs file.  Not really needed?
		git config --get-all $name |
			grep -E $refregex > $oldrefs
	fi
	# Add any refs from the query that is not already in oldrefs
	grep -F -v -f $oldrefs $newrefs |
		xargs $trace --max-args=1 --no-run-if-empty \
			  git config --add $name
}

gerrit_cherry() {
	local query
	query=$(printf '%s OR ' "$@")
	query=${query% OR*}
	gerrit_query --format=JSON --current-patch-set $query |
		head -n-1 |
		jq .currentPatchSet.revision |
		git cherry-pick --stdin
}

gerrit_coref() {
	set -x
	local query datadir
	query=$(printf '%s OR ' "$@")
	query=${query% OR*}
	datadir=$(mktemp --directory --tmpdir  git-gerrit-query-addref.XXXXXX)
	local numbers=$datadir/numbers
	gerrit_query --format=JSON --current-patch-set $query |
		head -n-1 |
		jq -r .number > $numbers
	if read -r and read -r; then
		echo Query matched more than one change:
		cat $numbers
	fi <$numbers
}

main() {
	if [ $# -eq 0 ]; then
		usage
		exit
	fi
	while [ "$1" ] ; do
		case "$1" in
			'-h'|'--help')
				usage
				exit 0
				;;
			"-p"|"--project"|"-p=*"|"--project=*")
				# TODO: Check the number of arguments
				project=${1#*=}
				if [ "$project" = "$1" ]; then
					project=$2
					shift
				fi
				shift
				;;
			"--debug")
				set -x
				shift
				;;
			'addref') shift; gerrit_addref "$@";        exit $?;;
			'coref')  shift; gerrit_coref "$@";         exit $?;;
			'cherry') shift; gerrit_cherry "$@";        exit $?;;
			'query')  shift; gerrit_query "$@";         exit $?;;
			'rmdups') shift; gerrit_rm_duplicates "$@"; exit $?;;
			'rmrefs') shift; gerrit_rmrefs "$@";        exit $?;;
			*)
				usage
				exit 1
				;;
		esac
	done
}

[ "$GIT_GERRIT_REFS_TEST" ] || main "$@"

# Local Variables:
# tab-width: 4
# End:
